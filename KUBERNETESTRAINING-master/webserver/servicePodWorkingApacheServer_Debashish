k8smaster@k8smaster-virtualBox:~/debashish$ more createpod_deb.yaml
--- 
apiVersion: v1
kind: Pod
metadata: 
  name: resourcepod-deb1
  labels: 
        app: webserver
        version: one
        region: china 
spec: 
  containers: 
    - 
      image: "docker.io/debu3645/debapachewebserver:v1"
      name: version1
      resources:
       requests:
        memory: "64Mi"
        cpu: "50m"
       limits:
        memory: "128Mi"
        cpu: "500m"
      ports: 
        - 
          containerPort: 7070



k8smaster@k8smaster-virtualBox:~/debashish$ more svc1.yaml 
kind: Service
apiVersion: v1
metadata:
  name: frontend-svc-deb
spec:
  selector:
    app: webserver
    region: china
    version: one
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 7070 


k8smaster@k8smaster-virtualBox:~/debashish$ kubectl -n debns1 get pods --show-labels
NAME               READY   STATUS    RESTARTS   AGE    LABELS
resourcepod-deb1   1/1     Running   0          153m   app=webserver,region=china,version=one


k8smaster@k8smaster-virtualBox:~/debashish$ kubectl -n debns1 get svc -o wide
NAME               TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE   SELECTOR
frontend-svc-deb   ClusterIP   10.108.216.152   <none>        8080/TCP   19m   app=webserver,region=china,version=one


kubectl create ns debns1
A Pod was created under 'debns1'. The pod uses a container image (i.e. debapachewebserver which runs on port 80)
A service was created under 'debns1'.

http://192.168.0.52:80/  <---- Works fine
http://10.108.216.152:8080/ <--- It wont work because 8080 is bind with 7070 of the container, but the apache is running on 80. Hence this needs to be updated.

In order to join a service with a pod, both of them need to have same 'labels' i.e. selectors labels under svc should be existing in the 'labels' of Pod.

k8smaster@k8smaster-virtualBox:~/debashish$ kubectl -n debns1 describe svc frontend-svc-deb
Name:              frontend-svc-deb
Namespace:         debns1
Labels:            <none>
Annotations:       <none>
Selector:          app=webserver,region=china,version=one
Type:              ClusterIP
IP:                10.108.216.152
Port:              <unset>  8080/TCP
TargetPort:        80/TCP
Endpoints:         192.168.0.52:80
Session Affinity:  None
Events:            <none>

TargetPort - The port where container/application needs to listen. This is inside Pod.
Port - This is the port where Pod should listen from service. In other words this is also called the service port.


http://10.108.216.152:8080/
