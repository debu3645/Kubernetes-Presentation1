//Install DOCKER CE
//Install Dependent package
$ apt-get update
$ apt-get -y install apt-transport-https ca-certificates curl software-properties-common
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

// Finger print 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88
$ sudo apt-key fingerprint 0EBFCD88

//ADD DOCKER REPO
$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

//Install Docker package 
$ sudo apt-get update
$ sudo apt-cache policy docker-ce
$ sudo apt-get install -y docker-ce


// VERIFY DOCKER STATUS Green and active is postive  
systemctl status docker

// ---Kubernetes Installation ---
// ADD Key
$ sudo curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

// ADD REPO
$ sudo cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

// INSTALL KUBERNETES PACKAGES
$ sudo apt-get update
$ sudo apt-get install -y kubelet kubeadm kubectl
//----Debashish----If you have the following error.....
//    E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable)
//    E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?
//      ps aux | grep -i apt
//      sudo kill -9 <Pid of all apt>  <---- This is how you solve it.
// HOLD SERVICE
$ sudo apt-mark hold kubelet kubeadm kubectl

// ADDITIONAL SETTINGS 
$ sudo modprobe br_netfilter
$ sudo echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
$ sudo echo "net.bridge.bridge-nf-call-iptables=1" >> /etc/sysctl.conf
//----Debashish--If you face the following error
//      -bash: /etc/sysctl.conf: Permission denied
//       sudo chmod 777 /etc/sysctl.conf <----This is how you solve it.
$ sudo sysctl -p

//SWAP OFF
#vim.tiny /etc/fstab 
sudo swapoff -a

// NETWORKING AND CLUSTER START


---- ANY ONE NETWORK PLUGGIN FLANNEL or CALICO -------


// Flannel
----------

$ kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=<master_IP>

// Save join token #kubeadm_join.txt

//ADM settings 
$ mkdir /root/.kube
$ cp -i /etc/kubernetes/admin.conf /root/.kube/config
$ sudo chown $(id -u):$(id -g) $HOME/.kube/config
$ export KUBECONFIG=/etc/kubernetes/admin.conf

//Flannel Network apply 
$ sudo kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86c5cd2643275/Documentation/kube-flannel.yml


// Calico
---------
//-----Debashish....Before executing the below pod network command, ensure there is a static IP address.---------------------
//Following are the steps to configure static IP in Ubuntu18.04(Bionic). But in Ubuntu 16.04 or lower, its in /etc/network/interfaces
//    sudo vi /etc/netplan/01-network-manager-all.yaml (note - the .yaml file name may be different but the location is /etc/netplan)
network:
  version: 2
  renderer: networkd
  ethernets:
    enp0s8:
      dhcp4: no
      dhcp6: no
      addresses: [10.10.10.2/24, ]
      gateway4:  10.10.10.1  <---- gw not required. may create Internet connection issue
      nameservers:
              addresses: [8.8.8.8, 8.8.4.4]

//Save the 01-network-manager-all.yaml file and execute  sudo netplan apply (no need to bootup the system)
//------------------------------------------------------------------------------------------------------
$ sudo kubeadm init --pod-network-cidr=192.168.0.0/16 --apiserver-advertise-address=<master_IP>
//----Debashish---If the above is not able to pull the kubeadm images, then perform below
//    k8smaster@k8smaster-VirtualBox:~$ sudo kubeadm config images pull  (try it more than once if it doesnt work)
//And then use the command sudo kubeadm init --pod-network-cidr=192.168.0.0/16 --apiserver-advertise-address=<master_IP>
//---------------------------------------------------------------------------------------------------------------------------
// Save join token #kubeadm_join.txt

//ADM settings 
$ sudo mkdir -p $HOME/.kube
$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
$ sudo chown $(id -u):$(id -g) $HOME/.kube/config
$ export KUBECONFIG=/etc/kubernetes/admin.conf

//Calico apply 
$ sudo kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml
$ sudo kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml


//By default, your cluster will not schedule pods on the master for security reasons, APPLY "kubectl taint" command 
$ sudo kubectl get pods -o wide --all-namespaces
$ sudo kubectl taint nodes --all node-role.kubernetes.io/master-


//STATUS CHECK 
$ sudo kubectl get nodes
//----------------------------------------------------------------------
//----Debashish----Incase if you reboot the Master node or Worker node and if you get the below error -


//    The connection to the server 10.10.10.2:6443 was refused - did you specify the right host or port? <---- Error statement
//--   Use the following two commands in Master node "sudo swapoff -a"  and "watch kubectl get nodes"

//Incase if the Worker node is rebooted and the status of Worker node remains "Not Ready" for the command "sudo kubectl get nodes", then "sudo swapff -a" in Worker node
and try to join again from the below token that you had stored while creating the "sudo kubeadm init" in master
    //kubeadm join 10.10.10.2:6443 --token puzzrc.snhzh3jv7x4kg9ad --discovery-token-ca-cert-hash sha256:585803f463338cf7fdd5a41f1fa98b52c7d21294d2e786fa85f82be38ad77013
 
//---------------------------------------------------------------------

ADDING NODE
-----------


DASHBOARD
---------

$ sudo kubectl create -f https://raw.githubusercontent.com/kubernetes/dashboard/master/aio/deploy/recommended/kubernetes-dashboard.yaml
$ sudo kubectl get svc -n kube-system | grep kubernetes-dashboard
$ sudo kubectl edit svc/kubernetes-dashboard -n kube-system
//change ClusterIP to NodePort
//------Debashish---- Change to "type: NodePort" and save the .yaml file-----------------------------------------
// Trouble Shoot
// Crash loop back dashboard
// kubectl drain <node_name> --delete-local-data --ignore-daemonsets
// kubectl uncordon <node_name>

//----------------------------------------------------

//----Debashish---Incase the status of "kubernetes-dashboard-57df4db6b-lfjt4" remains in "ContainerCreating", then use the below commands -
    // kubectl drain <node_name> --delete-local-data --ignore-daemonsets    (Generally <node_name> is the name of the Worker Node)
    // kubectl uncordon <node_name>
//----------------------------------------------------

ACCESS DASHBOARD
----------------
$ sudo kubectl create serviceaccount dashboard -n default
$ kubectl create clusterrolebinding dashboard-admin -n default --clusterrole=cluster-admin --serviceaccount=default:dashboard
$ kubectl get secret $(kubectl get serviceaccount dashboard -o jsonpath="{.secrets[0].name}") -o jsonpath="{.data.token}" | base64 --decode


CA-ADVISOR
-----------
docker run \
  --volume=/:/rootfs:ro \
  --volume=/var/run:/var/run:ro \
  --volume=/sys:/sys:ro \
  --volume=/var/lib/docker/:/var/lib/docker:ro \
  --volume=/dev/disk/:/dev/disk:ro \
  --publish=8080:8080 \
  --detach=true \
  --name=cadvisor \
  google/cadvisor:latest



COMMANDS---Debashish----

sudo kubectl get pods -o wide --all-namespaces

sudo kubectl describe pod <calico-node-cdz9f> --namespace <kube-system>


